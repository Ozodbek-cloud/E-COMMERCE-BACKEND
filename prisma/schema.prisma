generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  User
  Customer
}

enum ListingType {
  RENT
  SALE
  EXCHANGE
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  role      Roles
  password  String
  avatar    String?  @default("default-avatar.png")
  createdAt DateTime @default(now())

  Likes          Likes[]
  Contacts       Contact[]
  Accommodations Accommodation[]
  Ratings        Rating[]
}

model Likes {
  id              Int           @id @default(autoincrement())
  like            Boolean
  userId          String
  accommodationId String
  user            User          @relation(fields: [userId], references: [id])
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
}

model Contact {
  id              String        @id @default(uuid())
  date            DateTime      @default(now())
  time            String
  phone           String
  email           String
  message         String
  userId          String
  accommodationId String
  user            User          @relation(fields: [userId], references: [id])
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
}

model Accommodation {
  id             String      @id @default(uuid())
  img            Json?
  house_img      String?
  isActive       Boolean     @default(true)
  listing_type   ListingType
  title          String
  address        String?
  features       Json?
  price          Float
  discount       Float?
  build_year     Int?
  description    String?
  documents      Json?
  map_url        String?
  latitude       Float?
  longitude      Float?
  country        String?
  extra_features Int?
  user_id        String
  category_id    Int

  user     User     @relation(fields: [user_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  Likes    Likes[]
  Contacts Contact[]
  Ratings  Rating[]
}

model Rating {
  id              Int           @id @default(autoincrement())
  clean           Float
  location        Float
  communicate     Float
  userId          String
  accommodationId String
  user            User          @relation(fields: [userId], references: [id])
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
}

model Category {
  id       Int    @id @default(autoincrement())
  name     String
  img      String?
  icon_img String?

  Accommodations Accommodation[]
}
